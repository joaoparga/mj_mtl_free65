---
title: "Mobilizing Justice: Montreal Fair Pass Pilot"
author:
  - name: João Pedro Figueira Amorim Parga
    orcid: 0000-0002-4105-5927
    email: joao.parga@mail.utoronto.ca
    affiliations:
      - name: Mobilizing Justice Partnership
format:
  docx: 
    reference-doc: custom-reference-doc.docx
    toc: false
    toc-depth: 2
    number-sections: true
  html:
    toc: true
    toc_float: true
    toc_depth: 2
    number_sections: true
    code_folding: hide
    theme: readable
    embed-resources: true
  pdf:
    fig-width: 6
    fig-asp: 0.618
    number-sections: true
    colorlinks: true
    keeptex: true
    include-in-header: 
      text: |
        \usepackage{booktabs}
        \usepackage{siunitx}
        \newcolumntype{d}{S[
            input-open-uncertainty=,
            input-close-uncertainty=,
            parse-numbers = false,
            table-align-text-pre=false,
            table-align-text-post=false
         ]}
date: "last-modified"
date-format: '[This version:] MMMM D, YYYY'
abstract: "This version contains only the updated tables and visualizations from the new report. The text can be found at the onedrive link."
csl: csl/american-sociological-association.csl
tbl-cap-location: top
number-sections: true
execute:
  echo: false
  warning: false
  message: false
  cache: false
editor:
  mode: source
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(cache = FALSE)
# Use cache = TRUE if you want to speed up compilation

knitr::opts_knit$set(output.format = "html")  # Set to "html" for HTML output

# A function to allow for showing some of the inline code
rinline <- function(code){
  html <- '<code  class="r">``` `r CODE` ```</code>'
  sub("CODE", code, html)
}
```

```{r packages}
#| echo: false
#| include: false
library(tidyverse)
library(sf)
library(data.table)
library(janitor)
library(fs)
library(cancensus)
library(tmap)
library(DataExplorer)
library(patchwork)
library(mapview)
library(modelsummary)
library(kableExtra)
library(knitr)
library(gt)
library(gtsummary)
library(conflicted)
library(stars)
library(showtext)
library(sysfonts)
library(hrbrthemes)
library(flextable)
library(rstatix)
library(openxlsx)
library(MASS)
library(rcompanion)
library(mvoutlier)
library(psych)
# library(Z.gtsummary.addons)

`%nin%` = Negate(`%in%`)

`%nlike%` = Negate(`%like%`)
```

```{r conflicts}
#| include: false
select <- dplyr::select
conflicted::conflicts_prefer(dplyr::filter)
```

```{r fonts}
#| include: false
#| # use different fonts
sysfonts::font_add_google("Roboto", "roboto")
showtext::showtext_auto()
```


```{r}
knitr::opts_chunk$set(tab.topcaption = TRUE)
```


# Read data

## Survey

```{r readdata}
#| include: false

load(file = "data/df_both_waves.RData")
df_full <- df_both
rm(df_both)
load(file = "data/list_count_trips_wave.RData")

```

### filter both waves only

```{r filter attrition}
# keep only respondents who answered both waves
df_attrition <- df_full %>% 
  filter(response_rate=="Started wave 2")
```


Create new in

```{r group income groups}
df_attrition <- df_attrition %>% 
  mutate(
    income_groups2 = case_when(
     income_groups %in% c(
       "$120,000 to $149,999"
       , "$150,000 to $179,999"
       , "$180,000 to $209,999"
       , "$210,000 or more"
     ) ~ "$120,000 or more"
      , .default = income_groups 
     )
  )

df_attrition <- df_attrition %>% 
  mutate(
    income_groups2 = factor(
      x = income_groups2
      , levels = c(
        "Less than $15,000"
        , "$15,000 to $29,999"
        , "$30,000 to $59,999"
        , "$60,000 to $89,999"
        , "$90,000 to $119,999"
        , "$120,000 or more"
      )
      , ordered = T
    )
  )
```

### change age_corrected (and, thus, age_groups_control_treat)
what to do with people age_raw = 65 and age_corrected = 64?
A: do not change age_corrected based on q4 (binary what is your age: 50-64 or 65+)

Obs.: I've changed 05_2_create_vars to remove the code that previously changed incorrectly 64 to 65 based on year of birth


<!-- ```{r} -->
<!-- df_both %>% filter(wave=="Second" & has_free_pass_wave2=="Yes" & age_groups_binary=="50-64") %>% count(age_raw, age_corrected) -->
<!-- ``` -->

## Statscan SAM (missing)

```{r}

```


# Define variables

## treatment and control (MOVE TO AFTER OTHER VARIABLE CHANGES)

### option 1

- treatment: 65+ + t1_pass
- control: 65+ + t1_nopass

what to do with people 50-64 who declared having the free pass?

IMPORTANT: ON WAVE 1, Q97 (Do you currently have the Free 65+ fare loaded on your Opus card?) WAS ONLY ASKED TO PEOPLE 65+
i.e., 50-64 were not asked if they had the free card loaded on wave1

Resolução provisória para a formatação long da base dados

```{r}

df_second <- df_attrition %>% 
  filter(wave=="Second") %>% 
  mutate(
    treatment = case_when(
    
    age_corrected >= 65L & has_free_pass_wave2 == "No" ~ "Control" # 0L    
    # age_groups_binary == "65+" & has_free_pass_wave2 == "No" ~ "Control" # 0L
  
      , age_corrected >= 65L & has_free_pass_wave2 == "Yes" ~ "Treatment" # 1L
    # , age_groups_binary == "65+" & has_free_pass_wave2 == "Yes" ~ "Treatment" # 1L
    , .default = NA_character_
  )
  # other treat
  )

df_first <- df_attrition %>% 
  filter(wave=="First") %>% 
  mutate(treatment = case_when(
    response_id %in% setDT(df_second)[treatment=="Treatment",response_id] ~ "Treatment"
    , response_id %in% setDT(df_second)[treatment=="Control",response_id] ~ "Control"
    , .default = NA_character_
  ))

df_both <- data.table::rbindlist(
  list(df_first,df_second)
)

rm(df_first, df_second, df_attrition)

# OUTROS TIPOS DE TREATMENT & CONTROL (o t_c4 foi usado acima)
# df_both <- df_both %>% mutate(
#   # only 65+
#   # control: t0: no pass; t1: no pass
#   # treat: t0: no pass, t1: pass
#     treatment_control_1 = case_when(
#     age_groups_binary == "65+" & 
#       has_free_pass_wave1 == "No" &
#       has_free_pass_wave2 == "No" ~ "group_1"
#     , age_groups_binary == "65+" & 
#       has_free_pass_wave1 == "No" &
#       has_free_pass_wave2 == "Yes" ~ "group_2"
#     , .default = NA_character_
#   )
#   , treatment_control_2 = case_when(
#     age_groups_binary == "50-64" ~ "group_1"
#     , age_groups_binary == "65+" & has_free_pass_wave2 == "Yes" ~ "group_2"
#     , age_groups_binary == "65+" & has_free_pass_wave2 == "No" ~ "group_3"
#     , .default = NA_character_
#   )
#     , treatment_control_3 = case_when(
#     age_groups_binary == "50-64" ~ "group_1"
#     , age_groups_binary == "65+" & has_free_pass_wave2 == "Yes" ~ "group_2"
#     , .default = NA_character_
#   )
#   # only 65+
#   # control: t0: whatever; t1: no pass
#   # treat: t0: whatever, t1: pass
#   , treatment_control_4 = case_when(
#     age_groups_binary == "65+" & has_free_pass_wave2 == "No" ~ "group_1"
#     , age_groups_binary == "65+" & has_free_pass_wave2 == "Yes" ~ "group_2"
#     , .default = NA_character_
#   )
#   , treatment_control_5 = case_when(
#     age_groups_binary == "50-64" ~ "group_1"
#     , age_groups_binary == "65+" ~ "group_2"
#     , .default = NA_character_
#   )
# )
```

### option 2

- treatment: 65+ + t1_pass
- control: 60-64 (t1_nopass -> remove 60-64 with pass)

FOR NOW: REMOVE 60-64 WHO DECLARED HAVING A PASS ON T1

```{r}
df_second <- df_both %>% 
  filter(wave == "Second") %>% 
  mutate(
    treatment_60_64 = case_when(
      age_corrected >= 65L & has_free_pass_wave2 == "Yes" ~ "Treatment"
      
      , age_corrected >= 60L &
        age_corrected <= 64L &
        has_free_pass_wave2 == "No" ~ "Control"
      
      , .default = NA_character_
    )
  )

df_first <- df_both %>% 
  filter(wave=="First") %>% 
  mutate(treatment_60_64 = case_when(
    
    response_id %in% setDT(df_second)[treatment_60_64=="Treatment",response_id] ~ "Treatment"
    
    , response_id %in% setDT(df_second)[treatment_60_64=="Control",response_id] ~ "Control"
    
    , .default = NA_character_
  ))

df_both <- data.table::rbindlist(
  list(df_first,df_second)
)

rm(df_first, df_second)
```


### option 3

!
BELOW: CHANGE 50-64 TO 50-59
!




- treatment: 65+ + t1_pass
- control: 50-64 (t1_nopass -> remove 50-64 with pass)

FOR NOW: REMOVE 50-64 WHO DECLARED HAVING A PASS ON T1

```{r}
df_second <- df_both %>% 
  filter(wave == "Second") %>% 
  mutate(
    treatment_50_59 = case_when(
      age_corrected >= 65L & has_free_pass_wave2 == "Yes" ~ "Treatment"
      
      , age_corrected >= 50L &
        age_corrected < 59L &
        has_free_pass_wave2 == "No" ~ "Control"
      
      , .default = NA_character_
    )
  )

df_first <- df_both %>% 
  filter(wave=="First") %>% 
  mutate(treatment_50_59 = case_when(
    
    response_id %in% setDT(df_second)[treatment_50_59=="Treatment",response_id] ~ "Treatment"
    
    , response_id %in% setDT(df_second)[treatment_50_59=="Control",response_id] ~ "Control"
    
    , .default = NA_character_
  ))

df_both <- data.table::rbindlist(
  list(df_first,df_second)
)

rm(df_first, df_second)
```


### option 4

- treatment: 65+ + t1_pass
- control: 65+ t1_nopass & 60-64 t1_nopass

```{r}
df_second <- df_both %>% 
  filter(wave == "Second") %>% 
  mutate(
    treatment_60_65plus = case_when(
      age_corrected >= 65L & has_free_pass_wave2 == "Yes" ~ "Treatment"
      
      , age_corrected >= 60L &
        has_free_pass_wave2 == "No" ~ "Control"
      
      , .default = NA_character_
    )
  )

df_first <- df_both %>% 
  filter(wave=="First") %>% 
  mutate(treatment_60_65plus = case_when(
    
    response_id %in% setDT(df_second)[treatment_60_65plus=="Treatment",response_id] ~ "Treatment"
    
    , response_id %in% setDT(df_second)[treatment_60_65plus=="Control",response_id] ~ "Control"
    
    , .default = NA_character_
  ))

df_both <- data.table::rbindlist(
  list(df_first,df_second)
)

rm(df_first, df_second)
```


# Clean outcome variables


OK
- satisfaction with activity participation

- transit usage
- trip generation

OK
- subjective relationship to cost

```{r}
# relevel factors
df_both <- df_both %>% 
  mutate(
    satisfaction_activity_participation = fct_relevel(
      satisfaction_activity_participation
      , c("Dissatisfied","Neither", "Satisfied"))
    )
```



### TBD: factor/PCA analysis: satisfaction
INCOMPLTE!

### code ordered factors

Transform variables into ordered factors

```{r}
df_both <- df_both %>% 
  mutate(
    satisfaction_activity_participation = factor(
      x = satisfaction_activity_participation
      , levels = c("Dissatisfied","Neither","Satisfied")
      , ordered = T
    )
  )

df_both <- df_both %>% 
  mutate(
    q109_3 = factor(
      x = q109_3
      , levels = c("Strongly Disagree","Disagree","Neither agree nor disagree"
          , "Agree","Strongly Agree")
      , ordered = T
    )
    , q109_4 = factor(
      x = q109_4
      , levels = c("Strongly Disagree","Disagree","Neither agree nor disagree"
          , "Agree","Strongly Agree")
      , ordered = T
    )
    , q109_5 = factor(
      x = q109_5
      , levels = c("Strongly Disagree","Disagree","Neither agree nor disagree"
          , "Agree","Strongly Agree")
      , ordered = T
    )
  )
```


```{r}

df_outcome_participation <- df_both %>% 
  select(
    response_id,wave
    ,treatment,treatment_60_64, treatment_50_59, treatment_60_65plus
    ,satisfaction_activity_participation
    , q109_3, q109_4, q109_5
    ) %>% 
  pivot_wider(
    id_cols = c("response_id"
                ,"treatment", "treatment_60_64", "treatment_50_59"
                , "treatment_60_65plus"
                )
    , names_from = wave
    , values_from = c(satisfaction_activity_participation,q109_3, q109_4, q109_5)
    # , names_prefix = "satisfaction_participation_"
  ) %>% 
  janitor::clean_names()

df_outcome_participation <- df_outcome_participation %>% 
  mutate(
    delta_satisfaction_activity = case_when(
      satisfaction_activity_participation_first <
        satisfaction_activity_participation_second ~ "Worse satisfaction"
      , satisfaction_activity_participation_first ==
        satisfaction_activity_participation_second ~ "Same satisfaction"
      , satisfaction_activity_participation_first >
        satisfaction_activity_participation_second ~ "Better satisfaction"
      , .default = NA_character_
    )
    , delta_satisfaction_friends_family = case_when(
      q109_3_first <
        q109_3_second ~ "Worse satisfaction"
      , q109_3_first ==
        q109_3_second ~ "Same satisfaction"
      , q109_3_first >
        q109_3_second ~ "Better satisfaction"
      , .default = NA_character_
    )
    , delta_satisfaction_recreation = case_when(
      q109_4_first <
        q109_4_second ~ "Worse satisfaction"
      , q109_4_first ==
        q109_4_second ~ "Same satisfaction"
      , q109_4_first >
        q109_4_second ~ "Better satisfaction"
      , .default = NA_character_
    )
    , delta_satisfaction_attend_events = case_when(
      q109_5_first <
        q109_5_second ~ "Worse satisfaction"
      , q109_5_first ==
        q109_5_second ~ "Same satisfaction"
      , q109_5_first >
        q109_5_second ~ "Better satisfaction"
      , .default = NA_character_
    )
  )

df_outcome_participation <- df_outcome_participation %>% 
  mutate(
    across(
      .cols = dplyr::matches("delta")
      , ~factor(
        x = .x
        , levels = c("Worse satisfaction", "Same satisfaction"
                     , "Better satisfaction")
        , ordered = T
        )
    )
  )

# df_outcome_participation <- df_outcome_participation %>% 
#   mutate(
    # delta_satisfaction_activity_lvls = case_when(
    #   satisfaction_activity_participation_first == "Dissatisfied" &
    #     satisfaction_activity_participation_second == "Neither" ~ 1L
    #   , satisfaction_activity_participation_first == "Neither" &
    #     satisfaction_activity_participation_second == "Satisfied" ~ 1L
    #   , satisfaction_activity_participation_first == "Dissatisfied" &
    #     satisfaction_activity_participation_second == "Satisfied" ~ 2L
    #   , satisfaction_activity_participation_first == 
    #     satisfaction_activity_participation_second ~ 0L
    #   , satisfaction_activity_participation_first == "Satisfied" & 
    #     satisfaction_activity_participation_second == "Neither" ~ -1L
    #   , satisfaction_activity_participation_first == "Neither" & 
    #     satisfaction_activity_participation_second == "Dissatisfied" ~ -1L
    #   , satisfaction_activity_participation_first == "Satisfied" & 
    #     satisfaction_activity_participation_second == "Dissatisfied" ~ -2L
    #   , .default = NA_integer_
    # )
    
    # , delta_satisfaction_activity_bin = case_when(
    #     delta_satisfaction_activity_lvls < 0L ~ "Worse satisfaction" #-1L
    #     , delta_satisfaction_activity_lvls == 0L ~ "Same satisfaction" # 0L
    #     , delta_satisfaction_activity_lvls > 0L ~ "Better satisfaction" # 1L
    #     , .default = NA_character_
    #   )
    
    # ,delta_satisfaction_activity_bin2 = case_when(
    # satisfaction_activity_participation_first %in% c("Dissatisfied", "Neither") &
    #     satisfaction_activity_participation_second == "Satisfied" ~ 1L
    #   , satisfaction_activity_participation_first == satisfaction_activity_participation_second ~ 0L
    # 
    #   , satisfaction_activity_participation_first %in% c("Neither","Satisfied") & 
    #     satisfaction_activity_participation_second == "Dissatisfied" ~ -1L
    # 
    #   , satisfaction_activity_participation_first == "Dissatisfied" &
    #     satisfaction_activity_participation_second == "Neither" ~ 0L
    # 
    #   , satisfaction_activity_participation_first == "Satisfied" &
    #     satisfaction_activity_participation_second == "Neither" ~ 0L
    # 
    #   , .default = NA_integer_
    # )
    
#   , delta_satisfaction_friends_family = case_when(
#     q109_3_first == "Strongly Disagree" &
#       q109_3_second %in% c(
#         "Disagree"
#         ,"Neither agree nor disagree"
#         ,"Agree"
#         , "Strongly Agree") ~ 1L
#     , q109_3_first == "Disagree" &
#       q109_3_second %in% c(
#         "Neither agree nor disagree"
#         ,"Agree"
#         , "Strongly Agree") ~ 1L
#     , q109_3_first == "Neither agree nor disagree" &
#       q109_3_second %in% c(
#         "Agree"
#         , "Strongly Agree") ~ 1L
#     , q109_3_first == "Agree" &
#       q109_3_second %in% c("Strongly Agree") ~ 1L
#     , q109_3_first == q109_3_second ~ 0L
#     , q109_3_first == "Strongly Agree" &
#       q109_3_second %in% c(
#         "Strongly Disagree"
#         , "Disagree"
#         ,"Neither agree nor disagree"
#         , "Agree") ~ -1L
#     , q109_3_first == "Agree" &
#       q109_3_second %in% c(
#         "Strongly Disagree"
#         , "Disagree"
#         ,"Neither agree nor disagree") ~ -1L
#     , q109_3_first == "Neither agree nor disagree" &
#       q109_3_second %in% c(
#         "Strongly Disagree"
#         , "Disagree") ~ -1L
#     , q109_3_first == "Disagree" &
#       q109_3_second %in% c("Strongly Disagree") ~ -1L
#     , .default = NA_integer_
#     )
#   , delta_satisfaction_recreation = case_when(
#   q109_4_first == "Strongly Disagree" &
#     q109_4_second %in% c(
#       "Disagree"
#       ,"Neither agree nor disagree"
#       ,"Agree"
#       , "Strongly Agree") ~ 1L
#   , q109_4_first == "Disagree" &
#     q109_4_second %in% c(
#       "Neither agree nor disagree"
#       ,"Agree"
#       , "Strongly Agree") ~ 1L
#   , q109_4_first == "Neither agree nor disagree" &
#     q109_4_second %in% c(
#       "Agree"
#       , "Strongly Agree") ~ 1L
#   , q109_4_first == "Agree" &
#     q109_4_second %in% c("Strongly Agree") ~ 1L
#   , q109_4_first == q109_4_second ~ 0L
#   , q109_4_first == "Strongly Agree" &
#     q109_4_second %in% c(
#       "Strongly Disagree"
#       , "Disagree"
#       ,"Neither agree nor disagree"
#       , "Agree") ~ -1L
#   , q109_4_first == "Agree" &
#     q109_4_second %in% c(
#       "Strongly Disagree"
#       , "Disagree"
#       ,"Neither agree nor disagree") ~ -1L
#   , q109_4_first == "Neither agree nor disagree" &
#     q109_4_second %in% c(
#       "Strongly Disagree"
#       , "Disagree") ~ -1L
#   , q109_4_first == "Disagree" &
#     q109_4_second %in% c("Strongly Disagree") ~ -1L
#   , .default = NA_integer_
#   )
#   , delta_satisfaction_attend_events = case_when(
#   q109_5_first == "Strongly Disagree" &
#     q109_5_second %in% c(
#       "Disagree"
#       ,"Neither agree nor disagree"
#       ,"Agree"
#       , "Strongly Agree") ~ 1L
#   , q109_5_first == "Disagree" &
#     q109_5_second %in% c(
#       "Neither agree nor disagree"
#       ,"Agree"
#       , "Strongly Agree") ~ 1L
#   , q109_5_first == "Neither agree nor disagree" &
#     q109_5_second %in% c(
#       "Agree"
#       , "Strongly Agree") ~ 1L
#   , q109_5_first == "Agree" &
#     q109_5_second %in% c("Strongly Agree") ~ 1L
#   , q109_5_first == q109_5_second ~ 0L
#   , q109_5_first == "Strongly Agree" &
#     q109_5_second %in% c(
#       "Strongly Disagree"
#       , "Disagree"
#       ,"Neither agree nor disagree"
#       , "Agree") ~ -1L
#   , q109_5_first == "Agree" &
#     q109_5_second %in% c(
#       "Strongly Disagree"
#       , "Disagree"
#       ,"Neither agree nor disagree") ~ -1L
#   , q109_5_first == "Neither agree nor disagree" &
#     q109_5_second %in% c(
#       "Strongly Disagree"
#       , "Disagree") ~ -1L
#   , q109_5_first == "Disagree" &
#     q109_5_second %in% c("Strongly Disagree") ~ -1L
#   , .default = NA_integer_
# )
#   )


```


## cost

```{r}
df_both <- df_both %>% 
  mutate(
  difficulty_transport_expenses = factor(
    difficulty_transport_expenses
    , levels = c("No", "Neither", "Yes")
    , ordered = T
  )
  , q103 = factor(
    q103
    , levels = c(
      "Extremely easy"
      , "Somewhat easy"
      , "Neither easy nor difficult"
      , "Somewhat difficult"
      ,"Extremely difficult"
    )
    , ordered = T
  )
)

df_outcome_cost <- df_both %>% 
  select(
    response_id,wave
    ,treatment, treatment_60_64, treatment_50_59, treatment_60_65plus
# Has the cost of transit ever prevented you from taking a trip using public transit?    
    , q101
# Would you say you are riding transit as much as you would like?
    , q100
# q25 asked only to those who answered Yes to q100
# derived from q25: What prevents you from using transit as much as you would like
# if answer is i) nor worth the cost; or ii) i can't afford it
    , transit_barrier_cost_related
# q103 In the last 12 months, how easy or difficult has it been for you to meet your transportation expenses?
    , q103
    , difficulty_transport_expenses
    ) %>% 
  pivot_wider(
    id_cols = c("response_id"
                ,"treatment", "treatment_60_64", "treatment_50_59"
                , "treatment_60_65plus"
                )
    , names_from = wave
    , values_from = c(q100, q101, transit_barrier_cost_related
                      , q103, difficulty_transport_expenses)
    # , names_prefix = "satisfaction_participation_"
  ) %>% 
  janitor::clean_names()

df_outcome_cost <- df_outcome_cost %>% 
  mutate(
    delta_rides_enough_transit = case_when(
      q100_first == q100_second ~ "Same"
        # "Same perception" # "Rides same two periods" #0L
      
      , q100_first == "No" &
        q100_second == "Yes" ~ "Better"
        # "Improved perception" # "Rides more second period" # 1L
      
      , q100_first == "Yes" &
        q100_second == "No" ~ "Worse"
        # "Worsened perception" #"Rides less second period" # -1L
      
      , .default = NA_character_
    )
    , delta_cost_prevented_transit = case_when(
      q101_first == q101_second ~ "samet0t1"
        # "Same" #0L
      
      , q101_first == "No" &
        q101_second == "Yes" ~ "t0no_t1yes"
        # "Better" #1L
      
      , q101_first == "Yes" &
        q101_second == "No" ~ "t0yes_t1no"
        # "Worse" #-1L
      
      , .default = NA_character_
    )
    , delta_transit_barrier_cost = case_when(
      transit_barrier_cost_related_first == 
        transit_barrier_cost_related_second ~ "samet0t1"
        # 0L
      , transit_barrier_cost_related_first == "No" &
        transit_barrier_cost_related_second == "Yes" ~ "t0no_t1yes"
        # "Better"
        # 1L
      , transit_barrier_cost_related_first == "Yes" &
        transit_barrier_cost_related_second == "No" ~ "t0yes_t1no"
        # "Worse"
        # -1L
      , .default = NA_character_
    )
    # , delta_difficult_bin = case_when(
    #   difficulty_transport_expenses_first == 
    #     difficulty_transport_expenses_second ~ 0L
    #   , difficulty_transport_expenses_first < 
    #     difficulty_transport_expenses_second ~ 1L
    #   , difficulty_transport_expenses_first >
    #     difficulty_transport_expenses_second ~ -1L
    #   , .default = NA_integer_
    # )
    # , delta_difficult_bin2 = case_when(
    #   difficulty_transport_expenses_first == 
    #     difficulty_transport_expenses_second ~ 0L
    #   
    #   , difficulty_transport_expenses_first == "No" &
    #     difficulty_transport_expenses_second %in% c("Neither","Yes") ~ 1L
    #   
    #   , difficulty_transport_expenses_first == "Neither" &
    #     difficulty_transport_expenses_second == "Yes" ~ 1L
    #   
    #   , difficulty_transport_expenses_first == "Yes" &
    #     difficulty_transport_expenses_second %in% c("Neither", "No") ~ -1L
    #   
    #   , difficulty_transport_expenses_first == "Neither" &
    #     difficulty_transport_expenses_second == "No" ~ -1L
    #   , .default = NA_integer_
    # )
    , delta_difficult_broad = case_when(
# 5 Levels: Extremely easy < Somewhat easy < Neither easy nor difficult < ... < Extremely difficult
      q103_first == q103_second ~ "Same"
        # 0L
      , q103_first > q103_second ~ "Easier"
      # -1L
      , q103_first < q103_second ~ "Harder"
      # 1L
      , .default = NA_character_
    )
  )


df_outcome_cost <- df_outcome_cost %>% 
  mutate(
    delta_rides_enough_transit = factor(
      x = delta_rides_enough_transit
      , levels = c("Worse", "Same"
                     , "Better")
      , ordered = T
    )
    , across(
      .cols = c(
        , "delta_cost_prevented_transit"
        , "delta_transit_barrier_cost"
      )
      , ~factor(
        x = .x
        , levels = c("t0yes_t1no", "samet0t1"
                     , "t0no_t1yes")
        , ordered = T
        )
    )
  )

df_outcome_cost <- df_outcome_cost %>% 
  mutate(
    delta_difficult_broad = factor(
      x = delta_difficult_broad
      , levels = c("Easier","Same","Harder")
      , ordered = T
    )
  )
  
```

## count trips 

```{r}
df_outcome_trips <- df_both %>% 
  select(
    response_id,wave
    ,treatment,treatment_60_64, treatment_50_59, treatment_60_65plus
    ,starts_with("count")
    , "avg_trips_daily_wave"
    , -c("count_trips_total")
    ) %>% 
  pivot_wider(
    id_cols = c("response_id"
                ,"treatment","treatment_60_64", "treatment_50_59"
                , "treatment_60_65plus"
                )
    , names_from = wave
    , values_from = count_trips_wave:avg_trips_daily_wave
    # , names_prefix = "satisfaction_participation_"
  ) %>% 
  janitor::clean_names()

colunas <- df_both %>%
  select(
    starts_with("count")
    , "avg_trips_daily_wave"
    ) %>% 
  select(-count_trips_total) %>% 
  colnames() #%>% 
  # str_extract("(?<=count_).*")

df_outcome_trips[paste0("delta_", colunas)] <- 
  map2(
    # .x
    df_outcome_trips %>% select(ends_with("first"))
    # .y
    , df_outcome_trips %>% select(ends_with("second"))
    # delta = y - x
    , ~.y - .x
    )

df_outcome_trips <- df_outcome_trips %>%  dplyr::left_join(
  df_both %>% 
    filter(wave=="Second") %>% 
    select(response_id
           ,treatment,treatment_60_64, treatment_50_59, treatment_60_65plus
           ,count_trips_total, avg_trips_daily_total)
  , by = c("response_id"
           ,"treatment", "treatment_60_64", "treatment_50_59"
           , "treatment_60_65plus"
           )
) %>% 
  relocate(
    c(count_trips_total,avg_trips_daily_total)
    , .after = treatment_60_65plus
  ) 
  

```

If long format is needed, develop code below (use map)
https://stackoverflow.com/questions/70652460/difference-between-rows-in-long-format-for-r-based-on-other-column-variables

```{r}
# df_both %>% 
#   select(
#     response_id,wave,treatment,
#     starts_with("count")
#     , "avg_trips_daily_wave"
#     , -c("count_trips_total")
#   ) %>% 
#   group_by(response_id, treatment) %>% 
#   mutate(delta = diff(count_trips_wave)) %>% 
#   select(response_id,wave,treatment,count_trips_wave, delta)
```


<!-- ### CHECK COUNT TRIPS  -->
<!-- run this after running file 05_2_createvars (must use df_count) -->
<!-- compare df_count of work trips (b) on first wave to count of coun_trips_work_first (a) -->
<!-- ```{r} -->
<!-- # df_work <- df_count %>%  -->
<!-- #   select(response_id, wave, contains("work"))  -->

<!-- # df_work <- df_work %>%  -->
<!-- #   replace(is.na(.), 0) %>%  -->
<!-- #   mutate( -->
<!-- #     sum_work = rowSums(across(mode_stm_bus_dest_work:mode_rem_dest_work)) -->
<!-- #   ) -->
<!-- #  -->
<!-- # b <- df_work %>%  -->
<!-- #   filter(wave=="First" & response_id %in% unique(df_both$response_id)) %>%  -->
<!-- #   count(sum_work) -->
<!-- #  -->
<!-- # a <- df_outcome_trips %>% count(count_trips_work_first) -->

<!-- ``` -->


<!-- ```{r} -->
<!-- # https://stackoverflow.com/a/68032070 -->
<!-- df_outcome_trips <- df_both -->

<!-- setDT(df_outcome_trips)[ -->
<!--   , -->
<!--   diff_trips_wave := count_trips_wave - shift(count_trips_wave) -->
<!--   , by = .(response_id) -->
<!-- ] -->
<!-- ``` -->




## main_type

Active or transit?

```{r}
df_outcome_main <- df_both %>% 
  select(
    response_id,wave
    ,treatment,treatment_60_64, treatment_50_59, treatment_60_65plus
    # ,main_dest
    , main_mode
    , main_type
    ) %>% 
  pivot_wider(
    id_cols = c("response_id"
                ,"treatment","treatment_60_64", "treatment_50_59"
                , "treatment_60_65plus"
                )
    , names_from = wave
    , values_from = starts_with("main")
    # , names_prefix = "satisfaction_participation_"
  ) %>% 
  janitor::clean_names()

df_outcome_main <- df_outcome_main %>% 
  mutate(
    delta_type = case_when(
      # if same is NA -> remove facet na explicit
      main_type_first == main_type_second ~ "Same main mode"
        # NA_character_
        # "Same main mode"
        # 0L
      , main_type_first == "transit" &
        main_type_second %nin% c("transit") ~ "Transit no longer main"
        # -1L
      , main_type_first %nin% c("transit") &
        main_type_second %in% c("transit") ~ "Transit now main"
        # 1L
      , .default = NA_character_
    )
    , new_type = case_when(
      
      main_type_first == main_type_second ~ "same"
        # NA_character_
        # "same"
      
      , (main_type_first != "active" |
        is.na(main_type_first)) &
        main_type_second == "active" ~ "new_active"
      
      , (main_type_first != "car" |
        is.na(main_type_first)) &
        main_type_second == "car" ~ "new_car"
      
      , (main_type_first != "transit" |
        is.na(main_type_first)) &
        main_type_second == "transit" ~ "new_transit"
      
      , (main_type_first != "other" |
        is.na(main_type_first)) &
        main_type_second == "other" ~ "new_other"
      
      , .default = NA_character_
    )
    
    # , delta_type_broad = case_when(
    #   main_type_first == main_type_second ~ 0L
    #   , main_type_first %in% c("active","transit") &
    #     main_type_second == "car" ~ -1L
    #   , main_type_first == "car" &
    #     main_type_second %in% c("active","transit") ~ 1L
    #   , .default = NA_integer_
    # )
    # , delta_type_strict = case_when(
    #   main_type_first == main_type_second ~ "same"
    #   , main_type_first %in% c("car", "active", "other") &
    #     main_type_second == "transit" ~ "transit"
    #   , main_type_first %in% c("transit", "active", "other") &
    #     main_type_second == "car" ~ "car"
    #   , main_type_first %in% c("car", "active", "other") &
    #     main_type_second == "active" ~ "active"
    #   , main_type_first %in% c("car", "active", "transit") &
    #     main_type_second == "other" ~ "other"
    #   , .default = NA_character_
    # )
  )
  
df_outcome_main <- df_outcome_main %>% 
  mutate(
    new_type = factor(
      new_type
      , levels = c("new_active","new_car","new_other","new_transit","same")
    )
    , delta_type = factor(
      x = delta_type
      , levels = c("Transit no longer main","Same main mode","Transit now main")
      , ordered = T
    )
  )

```

## join outcomes


```{r}
df_outcomes <- dplyr::left_join(
  df_outcome_participation %>% 
    select(
      response_id
      ,treatment, treatment_60_64, treatment_50_59, treatment_60_65plus
           ,dplyr::matches("delta"))
  , df_outcome_cost %>% 
    select(response_id,dplyr::matches("delta"))
  , by = c("response_id")
) %>% 
  dplyr::left_join(
    df_outcome_trips %>% 
    select(response_id,dplyr::matches("delta"))
    , by = c("response_id")
  ) %>% 
  dplyr::left_join(
    df_outcome_main %>% 
    select(response_id, dplyr::matches("delta"), new_type)
    , by = c("response_id")
  )

l_outcomes <- list(
  "df_outcome_cost" = df_outcome_cost
  , "df_outcome_main" = df_outcome_main
  , "df_outcome_participation" = df_outcome_participation
  , "df_outcome_trips" = df_outcome_trips
  , "df_outcomes" = df_outcomes
)
```




# DETECT OUTLIERS: travel behaviour

https://trevorfrench.github.io/R-for-Data-Analysis/p3c3-outliers.html#density-plot
https://statsandr.com/blog/outliers-detection-in-r/#z-scores

## rationale
questions: 
q22
q95
q82
q83
q84
q85
q81
q86
q87
q88
q89
q90
q91
q92
q94
q117

Phrasing: `In the last seven days, how many times did you use < mode x > to travel to or from each of the following activities?`


## reasonable number of trips per day
Own example
* Considering each leg of the trip as a trip:

** Weekdays
JP tuesday jan 28th
University: 2 (1 going 1 back)
Groceries: 2 (1 going 1 back)

JP wednesday jan 29th
University: 2 (1 going 1 back)
Physiotherapy:  2 (1 going 1 back)

If one needs only `2` trips (1 leg going, 1 back) to work + 1 extra activity every day (`2` trips = 1 going + 1 back), that would result in 4 trips on a regular/normal weekday.

That would mean `4 x 5 (workdays) = 20 trips` on the weekdays

On an exceptional day, that count could go up to 1 or 2 additional round trips (6 or 8)

** Weekend
1 trips on each day of the weekend (2 + 2) = 4

** Total
20 (weekdays) + 4 (weekends) = `24 trips on a week`, 
meaning `24/7 = 3.4` trips daily


* Considering both legs of the trip as single trip: 1/2 of the previous

10 (weekdays) + 2 (weekends) = `12 trips on a week`, 
meaning `12/7 = 1.7` trips daily


### Literature

CHECK HOW THESE STUDIES ESTIMATED/HOW THE QUESTION WAS ASKED

Chudyk et al (2015): Vancouver: median 2.5 trips a day
Dejoux et al (2010): MTL (projection based on 2005 census): 
- 65-74: 2.17 (2006) and 3.01 (2021)
- 75 and over: 1.44 (2006) and 1.98 (2021)

COMPARE age groups
50-64
65-75
75+ 

COMBINE ABOVE 80

## summary

```{r}
#| results: hold
data.table::setDT(df_outcome_trips)

# summary total
summary(df_outcome_trips$avg_trips_daily_total)

# summary by wave
summary(df_outcome_trips$avg_trips_daily_wave_first)
summary(df_outcome_trips$avg_trips_daily_wave_second)

# summary by treatment
df_outcome_trips[, as.list(summary(avg_trips_daily_wave_first)), by = "treatment"]
df_outcome_trips[, as.list(summary(avg_trips_daily_wave_second)), by = "treatment"]

# include demographics on outcomes
df_outcome_trips <- df_outcome_trips %>% 
  dplyr::left_join(
    df_both %>% 
      filter(wave=="First") %>% 
      select(response_id, age_groups_5_grouped)
    , by = c("response_id")
  )

# summary by age group
df_outcome_trips[
  , as.list(summary(avg_trips_daily_wave_first)), by = "age_groups_5_grouped"
  ]

df_outcome_trips[
  , as.list(summary(avg_trips_daily_wave_second)), by = "age_groups_5_grouped"
  ]
```

## histogram

```{r}
df_both %>%
  filter(!is.na(treatment)) %>% 
  ggplot(
    aes(x=avg_trips_daily_wave)
    ) +
   geom_histogram(
     binwidth = 1
     ) +
  facet_wrap(~wave)
```


## scatter plot

```{r}
df_outcome_trips %>% 
  filter(!is.na(treatment)) %>% 
  ggplot(aes(x = avg_trips_daily_wave_first, y = avg_trips_daily_wave_second)) + 
  geom_point() +
  scale_x_continuous(breaks = seq(0,50,5)) +
  scale_y_continuous(breaks = seq(0,40,5))
```


## box plot

by treatment and control
```{r}
df_both %>%
  filter(!is.na(treatment)) %>% 
  ggplot(
    aes(y=avg_trips_daily_wave, x = treatment, group = treatment)
    ) +
   geom_boxplot(
     # position = "jitter"
     ) +
  # coord_flip() +
  geom_jitter() +
  facet_wrap(~wave)
```

by age group (5 age interval)

```{r}
df_both %>%
  filter(!is.na(treatment)) %>% 
    ggplot(
        aes(y=avg_trips_daily_wave, x = age_groups_5_grouped, group = age_groups_5_grouped)
    ) +
    geom_boxplot(
        # position = "jitter"
    ) +
    # coord_flip() +
    geom_jitter() +
    facet_wrap(~wave) 
```

## quantiles

```{r}

# quantiles_first <- quantile(
#   df_outcome_trips %>% 
#     filter(!is.na(treatment)) %>% 
#     pull(avg_trips_daily_wave_first)
#   , probs = c(0L, 0.25, 0.5, 0.75, 0.95, 0.99, 1L)
#   , na.rm = T
#   )
# quantiles_second <- quantile(
#   df_outcome_trips %>% 
#     filter(!is.na(treatment)) %>% 
#     pull(avg_trips_daily_wave_second)
#   , probs = c(0L, 0.25, 0.5, 0.75, 0.95, 0.99, 1L)
#   , na.rm = T
#   )

quantiles <- quantile(
  df_outcome_trips %>% 
    # filter(!is.na(treatment)) %>% 
    pull(avg_trips_daily_total)
  , probs = c(0L, 0.25, 0.5, 0.75, 0.95, 0.99, 1L)
  , na.rm = T
  )

df_outcome_trips$bin_avg_total <- cut(
  df_outcome_trips$avg_trips_daily_total
  , breaks = quantiles
  )

# df_outcome_trips$bin_avg_first <- cut(
#   df_outcome_trips$avg_trips_daily_wave_first
#   , breaks = quantiles_first
#   )
# 
# df_outcome_trips$bin_avg_second <- cut(
#   df_outcome_trips$avg_trips_daily_wave_second
#   , breaks = quantiles_second
#   )

df_outcome_trips %>% count(bin_avg_total)
# df_outcome_trips %>% count(bin_avg_first)
# df_outcome_trips %>% count(bin_avg_second)
```



```{r}
df_both_outliers <- df_both %>% 
  mutate(
    outliers_95 = case_when(
      avg_trips_daily_wave > 10 &
        wave == "First" ~ "outlier_first"
      , avg_trips_daily_wave > 10 &
        wave == "Second" ~ "outlier_second"
      , is.na(avg_trips_daily_wave) &
        wave == "First" ~ NA_character_
      , is.na(avg_trips_daily_wave) &
        wave == "Second" ~ NA_character_
      , .default = "non_outlier"
    )
  )


```


For the complete sample, the 95% quartile equals 9.56 average trips daily (considering both waves, i.e., sum(trips_counts) / 14 days). Rounding up, that's 10 trips daily.

*THE OUTLIERS THRESHOLD: 10*


```{r}
df_outcome_trips %>% 
  filter(!is.na(treatment)) %>% 
  ggplot(
    aes(x = avg_trips_daily_wave_first
        , y = avg_trips_daily_wave_second
        , colour = bin_avg_total
        )
    ) + 
  geom_point() +
  scale_x_continuous(breaks = seq(0,50,5)) +
  scale_y_continuous(breaks = seq(0,40,5)) 
```

## standard deviation

CHECK STANDARD DEVIATION
```{r}

```


## z scores

CHECK LATER: non-parametrical statistical test for a left skewed distribution

```{r}
df_outcome_trips$z_avg_first <- scale(df_outcome_trips$avg_trips_daily_wave_first)
# df_outcome_trips %>% 
#   ggplot() +
#   geom_histogram(aes(z_avg_first))

summary(df_outcome_trips$z_avg_first)

df_outcome_trips$z_avg_second <- scale(
  df_outcome_trips$avg_trips_daily_wave_second
  )
```


## hampel filter

## mvoutlier package

```{r}
Y <- as.matrix(
  df_outcome_trips[,c("avg_trips_daily_wave_first","avg_trips_daily_wave_second")]
  )

res <- mvoutlier::aq.plot(Y)
```

## REMOVE OUTLIERS



COUNT OUTLIERS

```{r}
# df_both_outliers %>% 
#   filter(!is.na(treatment)) %>% 
#   count(wave, outliers_95, treatment)
```

REMOVE OUTLIERS

```{r}
df_both <- df_both_outliers %>% 
  filter(outliers_95 == "non_outlier")
```

```{r}
l_outcomes <- l_outcomes %>% 
  map(
    ~ dplyr::left_join(
      x = .x
      , y = df_both %>% select(response_id, outliers_95)
      , by = c("response_id")
    )
  ) 

```



Find *intersection* between non-outliers
Individuals can be outliers in the first and/or second wave.
We want to keep the same individuals in the two waves.
Thus, we need to find the intersection of individuals who are not outliers in both waves.

```{r}
ids_non_out_first <- df_both %>% 
  filter(wave=="First") %>% 
  pull(response_id)

ids_non_out_second <- df_both %>% 
  filter(wave=="Second") %>% 
  pull(response_id)

ids_intersect <- base::intersect(ids_non_out_first
                                 , ids_non_out_second)
# filter on df_both
df_both <- df_both %>% 
  filter(response_id %in% ids_intersect)

# filter on l_outcomes
l_outcomes <- map(
  .x = l_outcomes
  , ~dplyr::filter(.data = .x, response_id %in% ids_intersect)
)
```

# SAVE DATA

```{r}
save(df_both, file = "data/df_both_outliers.RData")
save(l_outcomes, file = "data/l_outcomes.RData")
```




# Filter by control/treatment

Remove all observations that are NA on treatment
```{r}
df_tc <- df_both %>% filter(!is.na(treatment))
```



# Descriptive analysis

## constant demographics

```{r}
# treatment
desc_age <- df_tc %>% 
  dplyr::filter(wave == "First") %>% 
  
  # CORRECT BELOW
  mutate(treatment = factor(
    treatment
    , levels = c(0L,1L)
    , labels = c("Control", "Treatment")
    , ordered = T)) %>% 
  select(
    # wave
    treatment
    , age_groups_5_grouped
  # , visible_minority
  # , immigrant
  # , gender
  # , educ_has_postsec
) %>% 
  mutate(
    age_groups_5_grouped = forcats::fct_drop(
      age_groups_5_grouped
      , only = c("age_50_54","age_55_59", "age_60_64")
      )
    , age_groups_5_grouped = forcats::fct_recode(
      age_groups_5_grouped
      , `Age 65-69` = "age_65_69"
      , `Age 70-74` = "age_70_74"
      , `Age 75-79` = "age_75_79"
      , `Age 80-84` = "age_80_over"
    )
  ) %>% 
    mutate(
    across(
      .cols = -one_of("treatment")
      # don't change fct below for newer one
      , ~ forcats::fct_explicit_na(.x)
      )
  ) %>% 
  rename(
    # "Visible minority" = visible_minority
    # , "Is Immigrant" = immigrant
    # , "Gender" = gender
    # , "Has post-secondary education" = educ_has_postsec
    , "Treatment" = treatment
    , "Age groups (5 years intervals)" = age_groups_5_grouped
  ) %>% 
      gtsummary::tbl_summary(
        type = gtsummary::all_dichotomous() ~ "categorical"
        , sort = list(
          # `Treatment` ~ "frequency"
           `Age groups (5 years intervals)` ~ "alphanumeric"
        )
        # all_categorical() ~ "frequency"
        # , missing = "always"
        , missing_text = "Missing"
        , missing_stat = "{p_miss}%"
        , by = `Treatment`
        , statistic = all_categorical() ~ "{p}%"
      ) %>% 
        gtsummary::add_overall(last = T, 
                             # col_label = "Total, N = {N}"
                             ) %>%
      gtsummary::modify_caption(caption = "Descriptive statistics for categorical variables") %>% 
  # gtsummary::modify_header() %>% 
  gtsummary::as_tibble()



openxlsx::write.xlsx(desc_age, "output/df_age.xlsx")
```

```{r}
desc_constant <- df_tc %>% 
  dplyr::filter(wave == "First") %>% 
  mutate(treatment = factor(
    treatment
    , levels = c(0L,1L)
    , labels = c("Control", "Treatment")
    , ordered = T)) %>% 
  select(
    # wave
    treatment
  , visible_minority
  , immigrant
  , gender
  , educ_has_postsec
) %>% 
    mutate(
    across(
      .cols = -one_of("treatment")
      # don't change fct below for newer one
      , ~ forcats::fct_explicit_na(.x)
      )
  ) %>% 
  rename(
    "Visible minority" = visible_minority
    , "Is Immigrant" = immigrant
    , "Gender" = gender
    , "Has post-secondary education" = educ_has_postsec
    , "Treatment" = treatment
  ) %>% 
      gtsummary::tbl_summary(
        type = gtsummary::all_dichotomous() ~ "categorical"
        , sort = list(
          `Visible minority` ~ "frequency"
          , `Is Immigrant` ~ "frequency"
          , `Gender` ~ "frequency"
          , `Has post-secondary education` ~ "frequency"
        )
        # all_categorical() ~ "frequency"
        # , missing = "always"
        , missing_text = "Missing"
        , missing_stat = "{p_miss}%"
        , by = `Treatment`
        , statistic = all_categorical() ~ "{p}%"
      ) %>% 
      gtsummary::add_overall(last = T, 
                             # col_label = "Total, N = {N}"
                             ) %>%
      gtsummary::modify_caption(caption = "Descriptive statistics for categorical variables") %>% 
  # gtsummary::modify_header() %>% 
  gtsummary::as_tibble()



openxlsx::write.xlsx(desc_constant, "output/df_constant_demographics.xlsx")
```

## time-variant demographics

```{r}
desc_variant <- df_tc %>% 
  dplyr::filter(wave == "First") %>% 
  mutate(treatment = factor(
    treatment
    , levels = c(0L,1L)
    , labels = c("Control", "Treatment")
    , ordered = T)) %>% 
  select(
    # wave
    treatment
    , any_mobility_limitation
    # , any_functional_limitation
    , employment
    , income_groups2
    , in_lim
    , has_vehicle_household
) %>% 
    mutate(
    across(
      .cols = -one_of("treatment")
      # don't change fct below for newer one
      , ~ forcats::fct_explicit_na(.x)
      )
  ) %>% 
  rename(
    "Any mobility limitation" = any_mobility_limitation
    # , "Any functional limitation" = any_functional_limitation
    , "Employment" = employment
    , "Annual income groups" = income_groups2
    , "Household below LIM" = in_lim
    , "Has Vehicle in Household" = has_vehicle_household
    , "Treatment" = treatment
  ) %>% 
      gtsummary::tbl_summary(
        type = gtsummary::all_dichotomous() ~ "categorical"
        , sort = list(
          `Any mobility limitation` ~ "frequency"
          , `Employment` ~ "frequency"
          , `Annual income groups` ~ "frequency"
          , `Household below LIM` ~ "frequency"
          , `Has Vehicle in Household` ~ "frequency"
        )
        # all_categorical() ~ "frequency"
        # , missing = "always"
        , missing_text = "Missing"
        , missing_stat = "{p_miss}%"
        , by = `Treatment`
        , statistic = all_categorical() ~ "{p}%"
      ) %>% 
      gtsummary::add_overall(last = T, 
                             # col_label = "Total, N = {N}"
                             ) %>%
      gtsummary::modify_caption(caption = "Descriptive statistics for categorical variables") %>% 
  # gtsummary::modify_header() %>% 
  gtsummary::as_tibble()



openxlsx::write.xlsx(desc_variant, "output/df_variant_demographics.xlsx")
```

## descriptive dependent variables

descriptive 


```{r}

desc_outcomes <- df_outcomes %>% 
  select(treatment
         ,dplyr::matches("delta_satisfaction")
         ,delta_rides_enough_transit:delta_difficult_broad
         , delta_type:new_type
         ) %>% 
  mutate(
    treatment = factor(
    treatment
    , levels = c(0L,1L)
    , labels = c("Control", "Treatment")
    , ordered = T)
    , 
    ) %>%
    mutate(
    across(
      .cols = -one_of("treatment")
      # don't change fct below for newer one
      , ~ forcats::fct_explicit_na(.x)
      )
  ) %>%
  rename(
    "Treatment" = treatment
    , "Delta Satisf. Activity Participation" = delta_satisfaction_activity
    , "Delta Satisf. Friends Family" = delta_satisfaction_friends_family
    , "Delta Satisf. Recreation" = delta_satisfaction_recreation
    , "Delta Satisf. Attend Events" = delta_satisfaction_attend_events
    , "Delta Rides Enought Transit" = delta_rides_enough_transit
    , "Delta Cost Prevents Transit" = delta_cost_prevented_transit
    , "Delta Cost as Transit Barrier" = delta_transit_barrier_cost
    , "Delta Difficulty Transport Expenses" = delta_difficult_broad
    , "Delta Transit Main Mode" = delta_type
    , "Delta New Type" = new_type
  ) %>%
      gtsummary::tbl_summary(
        type = gtsummary::all_dichotomous() ~ "categorical"
        , sort = list(
          `Delta Satisf. Activity Participation` ~ "frequency"
          ,`Delta Satisf. Friends Family` ~ "frequency"
          ,`Delta Satisf. Recreation` ~ "frequency"
          ,`Delta Satisf. Attend Events` ~ "frequency"
          ,`Delta Rides Enought Transit` ~ "frequency"
          ,`Delta Cost Prevents Transit` ~ "frequency"
          ,`Delta Cost as Transit Barrier` ~ "frequency"
          ,`Delta Difficulty Transport Expenses` ~ "frequency"
          ,`Delta Transit Main Mode` ~ "frequency"
          ,`Delta New Type` ~ "frequency"
        )
        # all_categorical() ~ "frequency"
        # , missing = "always"
        , missing_text = "Missing"
        , missing_stat = "{p_miss}%"
        , by = `Treatment`
        , statistic = all_categorical() ~ "{p}%"
      ) %>%
      # gtsummary::add_overall(last = T,
      #                        # col_label = "Total, N = {N}"
      #                        ) %>%
      gtsummary::modify_caption(caption = "Descriptive statistics for categorical variables") %>%
  # gtsummary::modify_header() %>%
  gtsummary::as_tibble()

openxlsx::write.xlsx(desc_outcomes, "output/df_outcomes.xlsx")

```



# fisher exact test

## continuous variable (delta trips)

```{r}
simul_stat <- as.vector(NULL)
set.seed(1001)

df_fisher_continuous <- df_outcome_trips %>% 
  select(treatment, delta_trips_wave)

for(i in 1:557) {
  print(i)
  df_fisher_continuous$rand <- runif(557,min=-159,max=178)
  df_fisher_continuous$treatment_rand <- as.numeric(rank(df_fisher_continuous$rand)<=480)
  df_fisher_continuous$control_rand = 1-df_fisher_continuous$treatment_rand
  simul_stat <- append(simul_stat,
                       sum(df_fisher_continuous$treatment_rand*df_fisher_continuous$delta_trips_wave)/sum(df_fisher_continuous$treatment_rand) 
                       - sum(df_fisher_continuous$control_rand*df_fisher_continuous$delta_trips_wave)/sum(df_fisher_continuous$control_rand))
}

df_fisher_continuous$control = 1-df_fisher_continuous$treatment
actual_stat <- sum(df_fisher_continuous$treatment*df_fisher_continuous$delta_trips_wave)/sum(df_fisher_continuous$treatment) - 
  sum(df_fisher_continuous$control*df_fisher_continuous$delta_trips_wave)/sum(df_fisher_continuous$control)
actual_stat
sum(abs(simul_stat) >= actual_stat)/NROW(simul_stat)


#Printing the ATE
ate <- actual_stat
ate

control_mean <- sum(df_fisher_continuous$control*df_fisher_continuous$delta_trips_wave)/sum(df_fisher_continuous$control)
treatment_mean <- sum(df_fisher_continuous$treatment*df_fisher_continuous$delta_trips_wave)/sum(df_fisher_continuous$treatment)


# average variance in control
s_c <- (1/(sum(df_fisher_continuous$control)-1))*sum(((df_fisher_continuous$delta_trips_wave-control_mean)*df_fisher_continuous$control)^2)
s_c
# average variance in treatment
s_t <- (1/(sum(df_fisher_continuous$treatment)-1))*sum(((df_fisher_continuous$delta_trips_wave-treatment_mean)*df_fisher_continuous$treatment)^2)
s_t

Vneyman <- (s_c/sum(df_fisher_continuous$control) + s_t/sum(df_fisher_continuous$treatment))
print(sqrt(Vneyman))

# t_value
print(actual_stat/sqrt(Vneyman))

# lower limit
print(actual_stat-1.96*sqrt(Vneyman))
# higher limit
print(actual_stat+1.96*sqrt(Vneyman))

```




## cramer v

```{r}
my_cramer_v <- function(data, variable, by, ...) {
  table(data[[variable]], data[[by]]) %>%
    rstatix::cramer_v()
}
```

## cost

```{r}
fisher_cost <- df_outcomes %>% 
  select(
    treatment
    ,delta_rides_enough_transit
    ,delta_difficult_broad
    ) %>% 
  mutate(
    treatment = factor(
    treatment
    , levels = c(0L,1L)
    , labels = c("Control", "Treatment")
    , ordered = T)
    , 
    ) %>% 
  rename(
    # "Delta Satisf. Activity Participation" = delta_satisfaction_activity
    # , "Delta Satisf. Friends Family" = delta_satisfaction_friends_family
    # , "Delta Satisf. Recreation" = delta_satisfaction_recreation
    # , "Delta Satisf. Attend Events" = delta_satisfaction_attend_events
    , "Delta Rides Enought Transit" = delta_rides_enough_transit
    # , "Delta Cost Prevents Transit" = delta_cost_prevented_transit
    # , "Delta Cost as Transit Barrier" = delta_transit_barrier_cost
    , "Delta Difficulty Transport Expenses" = delta_difficult_broad
    # , "Delta Transit Main Mode" = delta_type
    # , "Delta New Type" = new_type
  ) %>% 
  tbl_summary(
    by = treatment
    , missing_text = "Missing"
    , missing_stat = "{n}" # "({p_miss}%)"
    ) %>% 
  add_p(
    list(all_categorical() ~ "fisher.test")
  ) %>% 
  add_significance_stars() %>% 
  add_stat(
    fns = list(all_categorical() ~ my_cramer_v)) %>% 
  modify_header(
    add_stat_1 ~ "Cramer V (Effect size)"
    , p.value ~ "Fisher exact test (p-value)"
    ) %>% 
  gtsummary::as_tibble()

openxlsx::write.xlsx(fisher_cost, "output/df_fisher_cost.xlsx")
```


```{r}
# df_outcomes <- df_outcomes %>% 
#   mutate(treatment = factor(
#     treatment
#     , levels = c(0L,1L)
#     , labels = c("Control", "Treatment")
#     , ordered = T
#     )
#     )
```

riders enough transit: *NOT SIGNIFICANT*
```{r}
# fisher test (2x2)
stats::fisher.test(
  df_outcome_cost$treatment
  , df_outcome_cost$delta_rides_enough_transit
)

rstatix::cramer_v(
  df_outcome_cost$treatment
  , df_outcome_cost$delta_rides_enough_transit
)
# post-hoc test: assess if the differences between levels was significant
rstatix::pairwise_fisher_test(
  xtab = table(
    df_outcome_cost$treatment
    ,df_outcome_cost$delta_rides_enough_transit
    )
  , p.adjust.method = "bonferroni"
)

```


cost EVER prevented riding transit as would like? 
2X2: *SIGNIFICANT*
POST HOC: 
  - t0: yes; t1: no -> *SIGNIFICANT*
  - Same t0
  
```{r}
# fisher test (2x2)
stats::fisher.test(
  df_outcome_cost$treatment
  , df_outcome_cost$delta_cost_prevented_transit
)
# post-hoc test: assess if the differences between levels was significant
rstatix::pairwise_fisher_test(
  xtab = table(
    df_outcome_cost$delta_cost_prevented_transit
    , df_outcome_cost$treatment
    )
  , p.adjust.method = "bonferroni"
)

```


cost as transit barrier
```{r}
# fisher test (2x2)
stats::fisher.test(
  df_outcome_cost$treatment
  , df_outcome_cost$delta_transit_barrier_cost
)
# post-hoc test: assess if the differences between levels was significant
rstatix::pairwise_fisher_test(
  xtab = table(
    df_outcome_cost$treatment
    ,df_outcome_cost$delta_transit_barrier_cost
    )
  , p.adjust.method = "bonferroni"
)

```


difficult meeting transport costs
```{r}
# fisher test (2x2)
stats::fisher.test(
  df_outcome_cost$treatment
  , df_outcome_cost$delta_difficult_broad
)
# post-hoc test: assess if the differences between levels was significant
rstatix::pairwise_fisher_test(
  xtab = table(
    df_outcome_cost$treatment
    ,df_outcome_cost$delta_difficult_broad
    )
  , p.adjust.method = "bonferroni"
)

```


<!-- ```{r} -->
<!-- # two options -->
<!-- df_q101 <- df_both %>% filter(wave=="Second" & q101!="Prefer not to answer") -->

<!-- stats::fisher.test(table(df_q101$treatment_control_4, df_q101$q101)) -->

<!-- # or -->
<!-- df <- data.frame( -->
<!--   "q101_no" = c(71, 353) -->
<!--   ,"q101_yes" = c(6, 122) -->
<!--   ,row.names = c("control", "treatment")  -->
<!--   , stringsAsFactors = F -->
<!-- ) -->
<!-- stats::fisher.test(df) -->

<!-- ``` -->

## activity participation

```{r}
fisher_participation <- df_outcomes %>% 
  select(
    treatment
    , delta_satisfaction_activity
    , delta_satisfaction_friends_family
    , delta_satisfaction_recreation
    , delta_satisfaction_attend_events
    ) %>% 
  mutate(
    treatment = factor(
    treatment
    , levels = c(0L,1L)
    , labels = c("Control", "Treatment")
    , ordered = T)
    , 
    ) %>% 
  rename(
    "Delta Satisf. Activity Participation" = delta_satisfaction_activity
    , "Delta Satisf. Friends Family" = delta_satisfaction_friends_family
    , "Delta Satisf. Recreation" = delta_satisfaction_recreation
    , "Delta Satisf. Attend Events" = delta_satisfaction_attend_events
    # , "Delta Rides Enought Transit" = delta_rides_enough_transit
    # , "Delta Cost Prevents Transit" = delta_cost_prevented_transit
    # , "Delta Cost as Transit Barrier" = delta_transit_barrier_cost
    # , "Delta Difficulty Transport Expenses" = delta_difficult_broad
    # , "Delta Transit Main Mode" = delta_type
    # , "Delta New Type" = new_type
  ) %>% 
  tbl_summary(
    by = treatment
    , missing_text = "Missing"
    , missing_stat = "{n}" # ({p_miss}%)"
    ) %>% 
  add_p(
    list(all_categorical() ~ "fisher.test")
  ) %>% 
  add_significance_stars() %>% 
  add_stat(
    fns = list(all_categorical() ~ my_cramer_v)) %>% 
  modify_header(
    add_stat_1 ~ "Cramer V (Effect size)"
    , p.value ~ "Fisher exact test (p-value)"
    ) %>% 
  gtsummary::as_tibble()

openxlsx::write.xlsx(fisher_participation, "output/df_fisher_participation.xlsx")
```


INCOMPLETE

```{r}
chisq_test(
  df_outcomes$treatment
  , df_outcomes$delta_satisfaction_activity
)

```


## diff trips per wave

```{r}
fisher_type <- df_outcomes %>% 
  select(
    treatment
    , delta_type
    , new_type
    # ,dplyr::matches("delta_satisfaction")
    ) %>% 
  mutate(
    treatment = factor(
    treatment
    , levels = c(0L,1L)
    , labels = c("Control", "Treatment")
    , ordered = T)
    , 
    ) %>% 
  rename(
    # "Delta Satisf. Activity Participation" = delta_satisfaction_activity
    # , "Delta Satisf. Friends Family" = delta_satisfaction_friends_family
    # , "Delta Satisf. Recreation" = delta_satisfaction_recreation
    # , "Delta Satisf. Attend Events" = delta_satisfaction_attend_events
    # , "Delta Rides Enought Transit" = delta_rides_enough_transit
    # , "Delta Cost Prevents Transit" = delta_cost_prevented_transit
    # , "Delta Cost as Transit Barrier" = delta_transit_barrier_cost
    # , "Delta Difficulty Transport Expenses" = delta_difficult_broad
    , "Delta Transit Main Mode" = delta_type
    , "Delta New Main Type" = new_type
  ) %>% 
  tbl_summary(
    by = treatment
    , missing_text = "Missing"
    , missing_stat = "{n}" #({p_miss}%)"
    ) %>% 
  add_p(
    list(all_categorical() ~ "fisher.test")
  ) %>% 
  add_significance_stars() %>% 
  add_stat(
    fns = list(all_categorical() ~ my_cramer_v)) %>% 
  modify_header(
    add_stat_1 ~ "Cramer V (Effect size)"
    , p.value ~ "Fisher exact test (p-value)"
    ) %>% 
  gtsummary::as_tibble()

openxlsx::write.xlsx(fisher_type, "output/df_fisher_type.xlsx")
```

INCOMPLETE

```{r}

```

## rcompanion

https://rcompanion.org/rcompanion/b_07.html
http://www.biostathandbook.com/fishers.html

```{r}
teste <- df_outcomes %>% 
  mutate(
    treatment = case_when(
      treatment == 0L ~ "Control"
      , treatment == 1L ~ "Treatment"
      , .default = NA_character_
    )
    # , delta_cost_prevented_transit = case_when(
    #   delta_cost_prevented_transit == "t0yes_t1no" ~ "t0yes_t1no"
    #   , delta_cost_prevented_transit == "samet0t1" ~ "samet0t1"
    #   , delta_cost_prevented_transit == "t0no_t1yes" ~ "t0no_t1yes"
    #   , .default = delta_cost_prevented_transit
    # )
    # , delta_cost_prevented_transit = factor(
    #   x = delta_cost_prevented_transit
    #   , levels = c("t0yes_t1no","samet0t1","t0no_t1yes")
    #   , ordered = T
    # )
    )

a <- table(teste$treatment, teste$delta_rides_enough_transit) %>% as.matrix()
# a1 <- table(teste$treatment, teste$delta_cost_prevented_transit) %>% as.matrix() %>% 
#   t()

(b <- pairwiseNominalIndependence(
  a,
  fisher = TRUE,
  gtest  = FALSE,
  chisq  = FALSE,
  digits = 3
)
)

cldList(comparison = b$Comparison,
        p.value    = b$p.adj.Fisher,
        threshold  = 0.05)
```

# delta new main type

```{r}
new_type <- df_tc %>% count(wave,treatment,main_type)
new_type_wider <- new_type %>% 
  pivot_wider(id_cols = c(treatment,main_type),names_from = wave
                         , values_from = n) %>% 
  mutate(
    delta = Second - First
    , `Percentual Change` = delta / First
    ) %>% 
  arrange(treatment,main_type)

openxlsx::write.xlsx(new_type_wider, "output/df_new_type_wider.xlsx")

```


```{r}
new_type_wider %>% 
  select(treatment,main_type,`Percentual Change`) %>% 
    mutate(
    treatment = factor(
    treatment
    , levels = c(0L,1L)
    , labels = c("Control", "Treatment")
    , ordered = T)
    , 
    ) %>% 
tbl_summary(
    by = treatment
    , missing_text = "Missing"
    , missing_stat = "{n}" #({p_miss}%)"
    , statistic = list(all_continuous() ~ "{mean} ({sd})")
    ) %>% 
  # add_p(
  #   # all_continuous() ~ "fisher.test"
  #   # list(all_categorical() ~ "fisher.test")
  # ) %>% 
  add_difference() #%>% 
  # add_significance_stars() %>% 
  # add_stat(
  #   fns = list(all_categorical() ~ my_cramer_v)) %>% 
  # modify_header(
  #   add_stat_1 ~ "Cramer V (Effect size)"
  #   , p.value ~ "Fisher exact test (p-value)"
  #   ) #%>% 
  # gtsummary::as_tibble()
```

## stb strata difference

```{r}
df_tc %>% 
  select(wave,treatment,main_type) %>% 
    mutate(
    treatment = factor(
    treatment
    , levels = c(0L,1L)
    , labels = c("Control", "Treatment")
    , ordered = T)
    , 
    ) %>% 
    tbl_strata(
    strata = treatment
    , .header = "**{strata}, N = {N}**"
    , ~.x %>% 
tbl_summary(
    by = wave
    , missing_text = "Missing"
    , missing_stat = "{n}" #({p_miss}%)"
    , statistic = list(
      all_continuous() ~ "{mean} ({sd})"
      ,all_dichotomous() ~ "{p}%"
      )
    ) %>% 
  # add_p(
  #   # all_continuous() ~ "fisher.test"
  #   # list(all_categorical() ~ "fisher.test")
  # ) %>% 
  # add_difference(group = wave) %>% 
  add_p()
)
```



# multivariate model


```{r}
df_model <- df_tc %>% 
  dplyr::filter(wave=="Second") %>% 
  dplyr::select(
    response_id
    , wave
    , treatment
    
    , age_groups_5_grouped
    , visible_minority
    , immigrant
    , gender
    , educ_has_postsec
    , any_mobility_limitation
    , any_functional_limitation
    , employment
    , income_groups2
    , in_lim
    , has_vehicle_household
  ) %>% dplyr::left_join(
    df_outcomes %>% select(
      response_id, treatment
      , dplyr::matches("delta_satisfaction")
      , delta_rides_enough_transit:delta_difficult_broad
      , delta_type:new_type
    )
    , by = c("response_id","treatment")
  )

```


```{r}
model <- MASS::polr(
  data = df_model
  , delta_type ~
    treatment
    # + age_groups_5_grouped
    # + visible_minority
    # + immigrant
    # # + gender
    # + educ_has_postsec
    # + any_mobility_limitation
    # # + any_functional_limitation
    # + employment
    # # + income_groups2
    + in_lim
    # + has_vehicle_household
  , Hess = T
)
```

```{r}
modelsummary(
  list(
    model
    ),
  stars = TRUE,
  exponentiate = TRUE,
  statistic = "conf.int"
)
```








